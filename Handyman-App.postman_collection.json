{
	"info": {
		"_postman_id": "handyman-auth-collection-2024",
		"name": "Handyman Management App - Complete Auth API",
		"description": "Complete authentication system with MongoDB integration, email verification, session management, 2FA, and admin approval for the Handyman Management App.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "handyman-api-v2"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://kleva-server.vercel.app",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "sessionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "verificationToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "tempToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "handymanUserId",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "üè• Health & Documentation",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						},
						"description": "Check API health status and get basic information."
					},
					"response": []
				},
				{
					"name": "API Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api-docs",
							"host": ["{{baseUrl}}"],
							"path": ["api-docs"]
						},
						"description": "Access the interactive Swagger UI documentation."
					},
					"response": []
				},
				{
					"name": "OpenAPI Spec",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api-docs/openapi.json",
							"host": ["{{baseUrl}}"],
							"path": ["api-docs", "openapi.json"]
						},
						"description": "Get the OpenAPI specification in JSON format."
					},
					"response": []
				}
			],
			"description": "Health check and API documentation endpoints."
		},
		{
			"name": "üîê Authentication - Registration",
			"item": [
				{
					"name": "Register Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.userId) {",
									"        pm.collectionVariables.set('userId', response.userId);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{customerEmail}}\",\n  \"password\": \"{{customerPassword}}\",\n  \"role\": \"customer\",\n  \"profile\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"phone\": \"+1234567890\",\n    \"address\": \"123 Main St, City, State\",\n    \"preferredContactMethod\": \"email\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "register"]
						},
						"description": "Register a new customer account. Customer accounts are auto-approved after email verification."
					},
					"response": []
				},
				{
					"name": "Register Handyman",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.userId) {",
									"        pm.collectionVariables.set('handymanUserId', response.userId);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{handymanEmail}}\",\n  \"password\": \"{{handymanPassword}}\",\n  \"role\": \"handyman\",\n  \"profile\": {\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Smith\",\n    \"phone\": \"+1234567891\",\n    \"address\": \"456 Oak Ave, City, State\",\n    \"skills\": [\"plumbing\", \"electrical\", \"carpentry\"],\n    \"experience\": 5,\n    \"hourlyRate\": 25,\n    \"availability\": \"Monday-Friday 8AM-6PM\",\n    \"bio\": \"Experienced handyman with 5 years of service\",\n    \"certifications\": [\"Licensed Plumber\", \"Electrical Safety Certified\"]\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "register"]
						},
						"description": "Register a new handyman account. Handyman accounts require admin approval after email verification."
					},
					"response": []
				},
				{
					"name": "Register Admin",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\",\n  \"role\": \"admin\",\n  \"profile\": {\n    \"firstName\": \"Admin\",\n    \"lastName\": \"User\",\n    \"phone\": \"+1234567892\",\n    \"department\": \"Management\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "register"]
						},
						"description": "Register a new admin account. Admin accounts are auto-approved after email verification."
					},
					"response": []
				},
				{
					"name": "Register Test User for Email Verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    console.log('‚úÖ Registration successful - check your email for verification link');",
									"    console.log('üìß The verification email should contain a link to verify the account');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"TestUser123!\",\n  \"role\": \"customer\",\n  \"profile\": {\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"phone\": \"+1234567899\",\n    \"address\": \"123 Test St, Test City, TS\",\n    \"preferredContactMethod\": \"email\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "register"]
						},
						"description": "Register a test user to receive a real verification email with a valid token."
					},
					"response": []
				}
			],
			"description": "User registration endpoints for different roles."
		},
		{
			"name": "üìß Email Verification",
			"item": [
				{
					"name": "Verify Email",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/verify-email/{{verificationToken}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "verify-email", "{{verificationToken}}"]
						},
						"description": "Verify email address using verification token sent to user's email."
					},
					"response": []
				},
				{
					"name": "Test Email Verification (Seed Data)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/verify-email/test-verification-token-12345",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "verify-email", "test-verification-token-12345"]
						},
						"description": "Test email verification with a sample token. This will fail unless you update the seed data with this token."
					},
					"response": []
				},
				{
					"name": "Verify Email with Proper Token Format",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/verify-email/{{verificationToken}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "verify-email", "{{verificationToken}}"]
						},
						"description": "Verify email with a proper 64-character hex token. The token should be generated when you register a new user and will be sent to your email."
					},
					"response": []
				}
			],
			"description": "Email verification endpoints."
		},
		{
			"name": "üîë Authentication - Login",
			"item": [
				{
					"name": "Login Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.tokens) {",
									"        pm.collectionVariables.set('accessToken', response.tokens.accessToken);",
									"        pm.collectionVariables.set('refreshToken', response.tokens.refreshToken);",
									"        pm.collectionVariables.set('userId', response.user.id);",
									"    }",
									"    if (response.requires2FA) {",
									"        pm.collectionVariables.set('tempToken', response.tempToken);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{customerEmail}}\",\n  \"password\": \"{{customerPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "login"]
						},
						"description": "Login with customer credentials."
					},
					"response": []
				},
				{
					"name": "Login Handyman (Pending Approval)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{handymanEmail}}\",\n  \"password\": \"{{handymanPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "login"]
						},
						"description": "Attempt to login with handyman credentials (should fail if pending approval)."
					},
					"response": []
				},
				{
					"name": "Login Approved Handyman",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.tokens) {",
									"        pm.collectionVariables.set('accessToken', response.tokens.accessToken);",
									"        pm.collectionVariables.set('refreshToken', response.tokens.refreshToken);",
									"        pm.collectionVariables.set('userId', response.user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{approvedHandymanEmail}}\",\n  \"password\": \"{{approvedHandymanPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "login"]
						},
						"description": "Login with approved handyman credentials."
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.tokens) {",
									"        pm.collectionVariables.set('accessToken', response.tokens.accessToken);",
									"        pm.collectionVariables.set('refreshToken', response.tokens.refreshToken);",
									"        pm.collectionVariables.set('userId', response.user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "login"]
						},
						"description": "Login with admin credentials."
					},
					"response": []
				}
			],
			"description": "User login endpoints for different roles."
		},
		{
			"name": "üîÑ Token Management",
			"item": [
				{
					"name": "Refresh Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.accessToken) {",
									"        pm.collectionVariables.set('accessToken', response.accessToken);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/refresh",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "refresh"]
						},
						"description": "Refresh expired access token using refresh token."
					},
					"response": []
				},
				{
					"name": "Get Token Info",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/token-info",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "token-info"]
						},
						"description": "Get information about the current access token."
					},
					"response": []
				}
			],
			"description": "Token management endpoints."
		},
		{
			"name": "üë§ User Profile Management",
			"item": [
				{
					"name": "Get Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/me",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "me"]
						},
						"description": "Get current user profile information."
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profile\": {\n    \"firstName\": \"John Updated\",\n    \"lastName\": \"Doe Updated\",\n    \"phone\": \"+1234567899\",\n    \"address\": \"123 Updated Main St, City, State\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/me",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "me"]
						},
						"description": "Update current user profile information."
					},
					"response": []
				},
				{
					"name": "Change Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currentPassword\": \"Customer123!\",\n  \"newPassword\": \"NewCustomer123!\",\n  \"confirmPassword\": \"NewCustomer123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/change-password",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "change-password"]
						},
						"description": "Change user password."
					},
					"response": []
				}
			],
			"description": "User profile management endpoints."
		},
		{
			"name": "üîê Two-Factor Authentication",
			"item": [
				{
					"name": "Enable 2FA",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/2fa/enable",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "2fa", "enable"]
						},
						"description": "Enable 2FA for the current user. Returns QR code and backup codes."
					},
					"response": []
				},
				{
					"name": "Verify 2FA Setup",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/2fa/verify",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "2fa", "verify"]
						},
						"description": "Verify 2FA setup with TOTP token from authenticator app."
					},
					"response": []
				},
				{
					"name": "Login with 2FA",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{customerEmail}}\",\n  \"password\": \"{{customerPassword}}\",\n  \"twoFactorToken\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "login"]
						},
						"description": "Login with 2FA token for users who have 2FA enabled."
					},
					"response": []
				},
				{
					"name": "Disable 2FA",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"Customer123!\",\n  \"twoFactorToken\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/2fa/disable",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "2fa", "disable"]
						},
						"description": "Disable 2FA for the current user."
					},
					"response": []
				}
			],
			"description": "Two-factor authentication endpoints."
		},
		{
			"name": "üîë Session Management",
			"item": [
				{
					"name": "Get Active Sessions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/sessions",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "sessions"]
						},
						"description": "Get all active sessions for the current user."
					},
					"response": []
				},
				{
					"name": "Revoke Specific Session",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/sessions/{{sessionId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "sessions", "{{sessionId}}"]
						},
						"description": "Revoke a specific session by session ID."
					},
					"response": []
				},
				{
					"name": "Revoke All Sessions",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/sessions",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "sessions"]
						},
						"description": "Revoke all sessions for the current user."
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/logout",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "logout"]
						},
						"description": "Logout and revoke current session."
					},
					"response": []
				}
			],
			"description": "Session management endpoints."
		},
		{
			"name": "üîí Password Reset",
			"item": [
				{
					"name": "Request Password Reset",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"customer@handyman.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/forgot-password",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "forgot-password"]
						},
						"description": "Request password reset email."
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{resetToken}}\",\n  \"newPassword\": \"NewPassword123!\",\n  \"confirmPassword\": \"NewPassword123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/reset-password/{{resetToken}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "reset-password", "{{resetToken}}"]
						},
						"description": "Reset password using reset token from email."
					},
					"response": []
				}
			],
			"description": "Password reset endpoints."
		},
		{
			"name": "üëë Admin - Handyman Approval",
			"item": [
				{
					"name": "Get Pending Handymen",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/admin/pending-handymen",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "admin", "pending-handymen"]
						},
						"description": "Get all handymen pending approval (Admin only)."
					},
					"response": []
				},
				{
					"name": "Approve Handyman",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/admin/approve-handyman/{{handymanUserId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "admin", "approve-handyman", "{{handymanUserId}}"]
						},
						"description": "Approve a handyman account (Admin only)."
					},
					"response": []
				},
				{
					"name": "Reject Handyman",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reason\": \"Insufficient experience and incomplete profile\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/admin/reject-handyman/{{handymanUserId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "admin", "reject-handyman", "{{handymanUserId}}"]
						},
						"description": "Reject a handyman account with reason (Admin only)."
					},
					"response": []
				}
			],
			"description": "Admin endpoints for managing handyman approvals."
		},
		{
			"name": "üìä User Statistics",
			"item": [
				{
					"name": "Get User Stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/users/stats",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "users", "stats"]
						},
						"description": "Get user statistics (public endpoint)."
					},
					"response": []
				}
			],
			"description": "User statistics and analytics endpoints."
		},
		{
			"name": "üß™ Test Endpoints",
			"item": [
				{
					"name": "Test Resend Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"test@example.com\",\n  \"subject\": \"Test Email\",\n  \"message\": \"This is a test email from the Handyman API.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/test-resend",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "auth", "test-resend"]
						},
						"description": "Test email sending functionality."
					},
					"response": []
				}
			],
			"description": "Test and utility endpoints."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-refresh token if expired",
					"if (pm.collectionVariables.get('refreshToken')) {",
					"    // Check if access token is expired",
					"    const accessToken = pm.collectionVariables.get('accessToken');",
					"    if (accessToken) {",
					"        try {",
					"            const payload = JSON.parse(atob(accessToken.split('.')[1]));",
					"            const now = Math.floor(Date.now() / 1000);",
					"            if (payload.exp && payload.exp < now + 60) { // Refresh if expires in 1 minute",
					"                pm.sendRequest({",
					"                    url: pm.collectionVariables.get('baseUrl') + '/api/v1/auth/refresh',",
					"                    method: 'POST',",
					"                    header: {",
					"                        'Content-Type': 'application/json'",
					"                    },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify({",
					"                            refreshToken: pm.collectionVariables.get('refreshToken')",
					"                        })",
					"                    }",
					"                }, function (err, response) {",
					"                    if (response && response.json() && response.json().accessToken) {",
					"                        pm.collectionVariables.set('accessToken', response.json().accessToken);",
					"                    }",
					"                });",
					"            }",
					"        } catch (e) {",
					"            // Token is invalid, will need to re-login",
					"        }",
					"    }",
					"}"
				]
			}
		}
	]
}
